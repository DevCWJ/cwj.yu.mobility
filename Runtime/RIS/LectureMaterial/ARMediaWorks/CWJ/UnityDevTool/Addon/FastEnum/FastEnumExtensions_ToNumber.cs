#if !UNITY_WEBGL
// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
using System;
using System.Runtime.CompilerServices;

using Unity.Collections.LowLevel.Unsafe;
using CWJ.EnumHelper.Internal;

namespace CWJ.EnumHelper
{
    /// <summary>
    /// Provides <see cref="Enum"/> extension methods.
    /// </summary>
    public static partial class FastEnumExtensions
    {
        /// <summary>
        /// Converts to the 8-bit signed integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static sbyte ToSByte<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(sbyte)
            ? UnsafeUtility.As<T, sbyte>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 8-bit unsigned integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static byte ToByte<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(byte)
            ? UnsafeUtility.As<T, byte>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 16-bit signed integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static short ToInt16<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(short)
            ? UnsafeUtility.As<T, short>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 16-bit unsigned integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ushort ToUInt16<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(ushort)
            ? UnsafeUtility.As<T, ushort>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 32-bit signed integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int ToInt32<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(int)
            ? UnsafeUtility.As<T, int>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 32-bit unsigned integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static uint ToUInt32<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(uint)
            ? UnsafeUtility.As<T, uint>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 64-bit signed integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static long ToInt64<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(long)
            ? UnsafeUtility.As<T, long>(ref value)
            : throw new ArgumentException(nameof(value));


        /// <summary>
        /// Converts to the 64-bit unsigned integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ulong ToUInt64<T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(ulong)
            ? UnsafeUtility.As<T, ulong>(ref value)
            : throw new ArgumentException(nameof(value));
    }
} 
#endif